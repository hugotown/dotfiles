# Build the system config and switch to it when running `just` with no args
default: switch

hostname := `hostname | cut -d "." -f 1`

### macos
# Build the nix-darwin system configuration without switching to it
[macos]
build target_host=hostname flags="":
  @echo "Building nix-darwin config..."
  nix --extra-experimental-features 'nix-command flakes'  build ".#darwinConfigurations.{{target_host}}.system" {{flags}}

# Build the nix-darwin config with the --show-trace flag set
[macos]
trace target_host=hostname: (build target_host "--show-trace")

# Build the nix-darwin configuration and switch to it
[macos]
switch target_host=hostname: (build target_host)
  @echo "switching to new config for {{target_host}}"
  sudo ./result/sw/bin/darwin-rebuild switch --flake ".#{{target_host}}"

# Update flake inputs to their latest revisions
update:
  nix flake update

# Garbage collect old OS generations and remove stale packages from the nix store
gc:
  nix-collect-garbage -d
  nix-collect-garbage --delete-older-than 7d
  nix-store --gc

# Show the current system configuration
show:
  darwin-rebuild --show-trace --verbose build --flake ".#{{hostname}}" | nom

# Check the flake for issues
check:
  nix flake check

# Format nix files
fmt:
  nix fmt

# List all available generations
generations:
  sudo nix-env --list-generations --profile /nix/var/nix/profiles/system